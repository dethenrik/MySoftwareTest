@page "/"

@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider _authenticationStateProvider;
@* @inject IServiceProvider _serviceProvider;
@inject UserManager<Data.ApplicationUser> _userManager *@

<PageTitle>Home</PageTitle>

@* <AuthorizeView>
    <Authorized>
        <div>Du er logget ind</div>
    </Authorized>
    <NotAuthorized>
        <div>Du er IKKE logget ind</div>
    </NotAuthorized>
</AuthorizeView> *@

@if (_isAuthenticated)
{
    <div>Du er logget ind (from code)</div>

    @if (_isAdmin)
    {
        <div>Du er Admin</div>
    }
    else
    {
        <div>Du er IKKE Admin</div>
    }
}
else
{
    <div>Du er IKKE logget ind (from code)</div>
}

@code{
    public bool _isAuthenticated;
    public bool _isAdmin;
    protected override async Task OnInitializedAsync()
    {
        // CreateUserRoleAsync("Admin", "usama1@emaill.com");
        var authenState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenState.User;
        _isAuthenticated = user.Identity.IsAuthenticated;
        _isAdmin = user.IsInRole("Admin");
    }

    // private async Task CreateUserRoleAsync(string role, string user)
    // {
    //     var roleManager = _serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    //     var userManager = _userManager;

    //     var userRoleCheck = await roleManager.RoleExistsAsync(role);
    //     if(!userRoleCheck)
    //     {
    //         IdentityRole myRole = new IdentityRole(role);
    //         await roleManager.CreateAsync(myRole);
    //     }

    //     var identityUser = await userManager.FindByEmailAsync(user);
    //     await userManager.AddToRoleAsync(identityUser, role);


    // }

}
